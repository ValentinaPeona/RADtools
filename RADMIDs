#!/usr/bin/env perl

# Copyright 2009,2010 John Davey, University of Edinburgh john.davey@ed.ac.uk

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#############################################################################

# RADMIDs
# Generate MIDs for use in RAD adapters

# History:
# 18/12/09 First public version
# 03/08/10 Incorporated into RADtools

use strict;
use warnings;
use Carp;
use English;
use Data::Dumper;
use Getopt::Long;

my @bases = ( 'A', 'G', 'C', 'T' );

# Get options

my $outfile    = 'mids.out';
my $length     = 5;
my $difference = 3;
my $verbose    = 0;
my $help       = 0;

my $options_okay = GetOptions(
    'out=s'        => \$outfile,
    'length=i'     => \$length,
    'difference=i' => \$difference,
    'verbose'      => \$verbose,
    'help'         => \$help,
);

die
"\nUsage: perl MID_generator.pl -o output_file -l mid_length -d basepairs_different -v (verbose) -h (help)\n"
  if !$options_okay
      or $help;

die "\nNumber of base pairs difference is greater than length of MID!\n"
  if ( $difference > $length );

###########
# Generate all MIDs of specified length

# All MIDs contains all permutations of strings
# of length $length containing @bases
if ($verbose) { print "Permuting... "; }
my @all_mids = @{ permute( $length, \@bases ) };

# Total number of MIDs is stored for printout later
my $all_mids_num = scalar @all_mids;

# PERMUTE: Recursively generates all permutations of MIDs of length $length containing @bases
sub permute {
    my ( $length, $bases ) = @_;

    if ($verbose) { print "L$length:"; }

# @long_codes will tack on each of the bases onto the front of short_codes returned from the recursive call
    my @long_codes = ();

    # if haven't got down to a sequence which is a single base long
    if ( $length > 1 ) {

        # generate all permutations for sequences one nt shorter than $length
        my $short_codes = permute( $length - 1, $bases );

        # tack on each base to each of the short_codes
        foreach my $base ( @{$bases} ) {
            foreach my $short_code ( @{$short_codes} ) {
                push @long_codes, $base . $short_code;
                if ($verbose) { print "."; }
            }
        }
    }
    else {

        # when $length=1, just return the bases as seed sequences
        @long_codes = @bases;
    }

    # return all permutations for this length
    if ($verbose) { print " "; }
    return \@long_codes;
}

###########
# Check through MIDs to remove those that differ at only 1 base

if ($verbose) { print "\nChecking... "; }

# Script hacks elements out of @all_mids as it goes, so use iterators rather than foreach
my $check_mid_num = 0;
my $diff_mid_num  = 0;

# Count number of bases which are different in two sequences
my $diff_base_count = 0;

# Arrays for the characters in each sequence
my @check_mid = ();
my @diff_mid  = ();

# While there are still MIDs to check in all_mids (and at least one MID more to check against)
while ( $check_mid_num < $#all_mids ) {
    if ($verbose) {
        print "\n$all_mids[$check_mid_num] - Discarding: ";
    }

    # split the MID into characters so it can be compared
    @check_mid = split( //, $all_mids[$check_mid_num] );

    # Start by comparing the MID following $check_mid
    $diff_mid_num = $check_mid_num + 1;

    # While there are still MIDs uncompared
    while ( $diff_mid_num <= $#all_mids ) {

        # Reset similarity counter - no bases are different
        $diff_base_count = 0;

        # Split up the comparison MID like check_mid
        @diff_mid = split( //, $all_mids[$diff_mid_num] );

# For each base in the MIDs, if they are the same, increment similarity counter
        for ( my $i = 0 ; $i < $length ; $i++ ) {
            if ( $check_mid[$i] ne $diff_mid[$i] ) {
                $diff_base_count++;
                if ( $diff_base_count > ( $difference - 1 ) ) { $i = $length; }
            }
        }

# If the MIDs are not sufficiently different, remove the MID from the list
# No need to increment diff_mid_num if MID has been removed; it already addresses the following MID
        if ( $diff_base_count < $difference ) {
            if ($verbose) { print $all_mids[$diff_mid_num] . " "; }
            splice( @all_mids, $diff_mid_num, 1 );
        }
        else {

        # If MID is sufficiently different, keep it and look at next MID
            $diff_mid_num++;
        }

    }
    $check_mid_num++;
}

###########
# Output
my $final_mids_num = scalar @all_mids;

print "\nWriting to $outfile\n";

open my $OUT, '>', $outfile
  or croak "Can't open output file $outfile: $OS_ERROR";

foreach my $mid (@all_mids) {
    print {$OUT} "$mid\n";
}
print
"Of $all_mids_num MIDs of length $length, $final_mids_num differ by at least $difference nucleotides.\n";
